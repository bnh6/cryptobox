name: "Cryptobox CI"

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
    
  Linting:
    runs-on: ubuntu-latest
    if: false
    steps:
      - uses: actions/checkout@v2
      - run: set -xeuo pipefail
      - name: linting for branch => ${{ github.ref }}
        run: |
          echo "linting the app"
          npm ci
          npm run lint || true # lint is currently failling


  GitHub-Testing:
    if: false
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        os: [ubuntu-18.04, ubuntu-latest, macos, macos-latest]
        node-version: [12.x, 13.x]
    steps:
      - uses: actions/checkout@v1
      # - name: Using node version ${{ matrix.node-version }}
        # uses: actions/setup-node@v1
      #   with:
      #     node-version: ${{ matrix.node-version }}

      - run: set -xeuo pipefail
      - name: Test on ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt install encfs -y
          npm ci
          npm test

      - name: Test on ${{ matrix.target }}
        # if: startsWith(matrix.os, 'macos')
        run: |
          /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
          brew cask install osxfuse
          brew install encfs
          sudo security unlock-keychain -u
          npm ci
          npm run make
      


  Travis-Testing:
    runs-on: ubuntu-latest
    if: false
    env:
      BRANCH_FULL: ${{ github.ref }}
      TRAVIS_TOKEN: ${{ secrets.TRAVIS_TOKEN }}
    steps:
      - run: set -xeuo pipefail
      - run: echo ::set-env name=BRANCH::$(basename $BRANCH_FULL)
      - uses: actions/checkout@v2
      # - uses: actions/setup-python@v1
      #   with:
      #     python-version: '3.x' # Semantic version range syntax or exact version of a Python version
      #     architecture: 'x64' # Optional - x64 or x86, defaults to x64
      - name: Testing on Travis for branch => ${{ github.ref }}
        run: |
          echo ${{ matrix.target }}
          cd ./build
          pip install -r requirements.txt
          # python3 travis.py
      # - run: |
      #     echo "Installing Travis "
      #     set -eo pipefail
      #     sudo apt install ruby-dev libffi-dev make gcc &&  sudo gem install travis
      #     travis --version
      #     travis login --pro --github-token ${{ secrets.TRAVIS_TOKEN }}
      #     echo ::set-env name=TRAVIS_TOKEN_API::$(travis token --pro)





  Building-Artifacts:
    runs-on: ${{matrix.os}}
    # needs:  [Linting, Travis-Testing]
    strategy:
      fail-fast: true # do not generate artefacts if any other job failed
      max-parallel: 10
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
      - run: set -xeuo pipefail
      - name: BUILDING for branch => ${{ github.ref }}
        run: |
          echo "building artifacts"
          uname -a
          npm ci
          npm run make

      - name: uploading artefacts
        # if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-artifact@v2
        with:
          name: release
          # here https://github.com/actions/upload-artifact it does mention the pattern follows https://facelessuser.github.io/wcmatch/glob/ but the following links does not work
          # path: release/**/[Cc]rypto[Bb]ox.*
          # path: release/cryptobox*.*(dmg|app|deb|rpm|tar.gz) 	
          path: release/cryptobox*


  Distribute:
    runs-on: ubuntu-latest
    # if: ${{ contains(['master', 'dev'], github.ref}}
    needs: [Building-Artifacts]
    steps:
      - name: download CLI image
        uses: actions/download-artifact@v1
        with:
          name: release

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            tag_name: ${{ github.run_number }}
            release_name: Release ${{ github.run_number }}
            draft: true
            prerelease: true
            body: |
              testing releases through the pipelines

      - name: upload CLI image
        uses: actions/upload-release-asset@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: release.zip
            asset_name: cryptobox-release.zip
            asset_content_type: application/zip