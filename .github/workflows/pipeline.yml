name: "Cryptobox CI"

on:
  push:
    branches:
      - "dev"
      - "master"
      - "feature-*"
  pull_request:
    branches:
      - "dev"
      - "master"
      - "feature-*"

jobs:
  Linting:
    runs-on: ubuntu-latest
    if: true
    steps:
      - uses: actions/checkout@v2
      - run: set -xeuo pipefail
      - name: Linting => ${{ github.ref }}
        run: |
          echo "linting the app"
          npm ci
          npm run lint
  GitHub-Testing:
    if: true
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [12.x, 13.x]
    steps:
      - uses: actions/checkout@v1
      - run: set -xeuo pipefail
      - name: Test on ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt install  libsecret-1-dev
          npm ci
          npm run test
      - name: Test on ${{ matrix.target }}
        if: startsWith(matrix.os, 'macos')
        run: |
          npm ci
          npm run test
  Travis-Testing:
    runs-on: ubuntu-latest
    if: true
    env:
      BRANCH_FULL: ${{ github.ref }}
      TRAVIS_TOKEN: ${{ secrets.TRAVIS_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - run: set -xeuo pipefail
      - run: echo ::set-env name=BRANCH::$(basename $BRANCH_FULL)
      # it requires the travis_token secret
      # TODO transform this into github action (independent)
      - name: Testing on Travis => ${{ github.ref }}
        run: |
          echo ${{ matrix.target }}
          cd ./build
          pip install -r requirements.txt
          python3 travis.py
  Building-Artefacts:
    runs-on: ${{matrix.os}}
    if: false
    strategy:
      fail-fast: false # let the other continue if one fails
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
      - run: set -xeuo pipefail
      - name: Building artefacts => ${{ github.ref }}
        run: |
          echo "building artefacts"
          uname -a
          npm ci
          npm run make
      - name: uploading artefacts
        uses: actions/upload-artifact@v2
        with:
          name: release
          # TODO here https://github.com/actions/upload-artifact it does mention the pattern follows https://facelessuser.github.io/wcmatch/glob/ but the following links does not work
          # path: release/**/[Cc]rypto[Bb]ox.*
          # path: release/cryptobox*.*(dmg|app|deb|rpm|tar.gz)
          path: release/cryptobox*
  Create-Release:
    if: false
    runs-on: ubuntu-latest
    # if: ${{ contains(['master', 'dev'], github.ref}} # generate release for PR only
    needs: [Linting, Travis-Testing, Building-Artefacts]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: true
          prerelease: true
          body: |
            Workflow    = ${{ github.workflow }}
            JobId       = ${{ github.job }}
            Actor       = ${{ github.actor }}
            Repo        = ${{ github.repository }}
            Event       = ${{ github.event_name }}
            Commit      = ${{ github.sha }}
            Ref         = ${{ github.ref }}
            If Pull Request:
            Head (PR)   = ${{ github.head_ref }}
            Base (PR)   = ${{ github.base_ref }}
  Upload-Release:
    if: false
    runs-on: ubuntu-latest
    needs: [Create-Release]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: false # upload files independently
      max-parallel: 10
      matrix:
        flavour:
          [
            "cryptobox-0.0.1.dmg",
            "cryptobox-0.0.1.tar.gz",
            "cryptobox-0.0.1-ia32.tar.gz",
            "cryptobox_0.0.1_i386.deb",
            "cryptobox_0.0.1_amd64.deb",
            "cryptobox-0.0.1.i686.rpm",
            "cryptobox-0.0.1.x86_64.rpm",
          ]
    steps:
      - name: download ${{ matrix.flavour }}
        uses: actions/download-artifact@v1
        with:
          name: release
      - run: echo ::set-env PRODUCT_NAME=$(node -p "require('./package.json').productName")
      - run: echo ::set-env PRODUCT_VERSION=$(node -p "require('./package.json').productName")
      - name: Upload ${{ matrix.flavour }}
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.Create-Release.outputs.release_url }}
          asset_path: release/${{ matrix.flavour }}
          asset_name: ${{ matrix.flavour }}
          asset_content_type: application/zip
