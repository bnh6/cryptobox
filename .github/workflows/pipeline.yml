name: "Cryptobox CI"

on:
  push:
    branches:
      - "dev"
      - "master"
      - "feature-*"
      - "fix/*"
  pull_request:
    branches:
      - "dev"
      - "master"
      - "feature-*"

env:
  SCRIPTS: ./build-scripts

jobs:
  PrepareEnvironment:
    if: false
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2
      # - name: Setup node for ${{ matrix.target }}
      #   uses: actions/setup-node@v2-beta
      #   with:
      #     node-version: ${{ matrix.node-version }}
      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}_${{ matrix.node-version }}_${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{  matrix.os }}_${{ matrix.node-version }}
      - name: Install Dependencies
        run: npm install
      - name: Build
        run: npm build

  # CodeQualiy:
  #   runs-on: macos-latest
  #   if: false
  #   steps:
  #     - name: Linting => ${{ github.ref }}
  #       run: |
  #         set -xeuo pipefail
  #         echo "linting the app"
  #         npm ci
  #         npm run lint
  GitHub-Testing:
    if: true
    runs-on: ${{ matrix.os }}
    # needs: [PrepareEnvironment]
    strategy:
      fail-fast: false
      max-parallel: 12
      matrix:
        os: [macos-latest, windows-latest]
        # os: [windows-latest]
        node-version: [14.x, 15.x, 16.x]
    steps:
      - uses: actions/checkout@v1

      - name: Setup Linux environment
        if: startsWith(matrix.os, 'ubuntu')
        run: chmod +x ${SCRIPTS}/linux-setup.sh && ${SCRIPTS}/linux-setup.sh

      - name: Setup MAC environment
        if: startsWith(matrix.os, 'macos')
        run: chmod +x ${SCRIPTS}/mac-setup.sh && ${SCRIPTS}/mac-setup.sh

      - name: Setup Windows environment
        if: startsWith(matrix.os, 'windows')
        run: |
          $ErrorActionPreference='Stop'
          choco feature disable -n=showDownloadProgress
          #  wget https://github.com/dokan-dev/dokany/releases/download/v1.2.2.1000/DokanSetup_redist.exe -OutFile DokanSetup_redist.exe
          # .\DokanSetup_redist.exe /passive /norestart
          # wget https://download.visualstudio.microsoft.com/download/pr/11100229/78c1e864d806e36f6035d80a0e80399e/VC_redist.x86.exe -OutFile VC_redist.x86.exe
          # .\VC_redist.x86.exe /passive /norestart
          curl.exe --output vc_redist.x64.exe --location --url https://aka.ms/vs/16/release/vc_redist.x64.exe
          Start-Process msiexec.exe -Wait -ArgumentList '/I vc_redist.x64.exe /quiet /qn /norestart /L*V “vc.log”’
          curl.exe --output dokan64.msi --location  https://github.com/dokan-dev/dokany/releases/latest/download/Dokan_x64.msi
          Start-Process msiexec.exe -Wait -ArgumentList '/I dokan64.msi /quiet /qn /norestart /L*V "dokan.log"'
          curl.exe --output cryfs64.msi --location --url https://github.com/cryfs/cryfs/releases/download/0.10.2/cryfs-0.10.2-win64.msi
          Start-Process msiexec.exe -Wait -ArgumentList '/I cryfs64.msi /quiet /qn /norestart /L*V "cryfs.log"'
          echo "::group::Printing logs"
          type *.log
          echo "::endgroup::"
          copy 'C:\Program Files\CryFS\0.10.2\bin\*' 'C:\Windows' 
          echo "C:\Program Files\CryFS\0.10.2\bin\" >> $GITHUB_PATH
          setx /M CRYFS_FRONTEND "noninteractive"
          echo "::group::installing encfs4win"
          echo "::endgroup::"
          choco install encfs4win --pre
          echo "C:\Program Files (x86)\encfs'\" >> $GITHUB_PATH
          copy "C:\Program Files (x86)\encfs\*" "C:\Windows"
          encfs.exe --version
          cryfs.exe --version
          dir "C:\Program Files\dokan"

      - name: Executing tests
        run: |
          npm ci
          npm build
          npm run test
  Travis-Testing:
    runs-on: ubuntu-latest
    if: false
    env:
      BRANCH_FULL: ${{ github.ref }}
      TRAVIS_TOKEN: ${{ secrets.TRAVIS_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - run: set -xeuo pipefail
      - run: echo ::set-env name=BRANCH::$(basename $BRANCH_FULL)
      # it requires the travis_token secret
      # TODO transform this into github action (independent)
      - name: Testing on Travis => ${{ github.ref }}
        run: |
          echo ${{ matrix.target }}
          cd ./build
          pip install -r requirements.txt
          python3 travis.py
  Building-Artefacts:
    if: true
    runs-on: ${{ matrix.os }}
    needs: [PrepareEnvironment]
    strategy:
      fail-fast: false # let the other continue if one fails
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v1
      - run: |
          npm ci
          npm build
          npm run make
          # ls -lRh ./release
      - name: uploading artefacts
        uses: actions/upload-artifact@v2
        with:
          name: release
          # TODO here https://github.com/actions/upload-artifact it does mention the pattern follows https://facelessuser.github.io/wcmatch/glob/ but the following links does not work
          # path: release/**/[Cc]rypto[Bb]ox.*
          # path: release/cryptobox*.*(dmg|app|deb|rpm|tar.gz)
          path: release/cryptobox*

  Create-Release:
    runs-on: ubuntu-latest
    if: contains(fromJson('["master", "dev"]'), github.ref) && needs.GitHub-Testing.result == 'success' && needs.Building-Artefacts.result == 'success'
    needs: [GitHub-Testing, Building-Artefacts]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          # if not master, the release is a draft
          draft: (github.base_ref != "refs/heads/master")
          prerelease: (github.base_ref != "refs/heads/master")
          body: |
            Workflow    = ${{ github.workflow }}
            JobId       = ${{ github.job }}
            Actor       = ${{ github.actor }}
            Repo        = ${{ github.repository }}
            Event       = ${{ github.event_name }}
            Commit      = ${{ github.sha }}
            Ref         = ${{ github.ref }}
            If Pull Request:
            Head (PR)   = ${{ github.head_ref }}
            Base (PR)   = ${{ github.base_ref }}
  Upload-Release:
    if: true
    runs-on: ubuntu-latest
    needs: [Create-Release]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: false # upload files independently
      max-parallel: 10
      matrix:
        flavour:
          [
            "cryptobox-0.0.1.dmg",
            "cryptobox-0.0.1.tar.gz",
            "cryptobox-0.0.1-ia32.tar.gz",
            "cryptobox_0.0.1_i386.deb",
            "cryptobox_0.0.1_amd64.deb",
            "cryptobox-0.0.1.i686.rpm",
            "cryptobox-0.0.1.x86_64.rpm",
          ]
    steps:
      - name: download ${{ matrix.flavour }}
        uses: actions/download-artifact@v1
        with:
          name: release
      - run: echo ::set-env PRODUCT_NAME=$(node -p "require('./package.json').productName")
      - run: echo ::set-env PRODUCT_VERSION=$(node -p "require('./package.json').productName")
      - run: ls -larthR ./release
      - name: Upload ${{ matrix.flavour }}
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.Create-Release.outputs.release_url }}
          asset_path: release/${{ matrix.flavour }}
          asset_name: ${{ matrix.flavour }}
          asset_content_type: application/zip
